--- PATCHES.orig	2019-05-26 19:28:51 UTC
+++ PATCHES
@@ -0,0 +1 @@
+patch-1.5.6.cb.reverse_reply.2
--- init.h.orig	2019-05-26 19:28:51 UTC
+++ init.h
@@ -2945,6 +2945,13 @@ struct option_t MuttVars[] = {
   ** possibly including eventual real names.  When it is \fIunset\fP, mutt will
   ** override any such real names with the setting of the $$realname variable.
   */
+  { "reverse_reply",	DT_BOOL, R_NONE, OPTREVREPLY, 0 },
+  /*
+  ** .pp
+  ** When set, this variable uses the name from your aliases in the To and Cc
+  ** headers of reply mails you send, like $reverse_alias does in the index.
+  ** When unset, the headers taken from the original mail are left unchanged.
+  */
   { "rfc2047_parameters", DT_BOOL, R_NONE, OPTRFC2047PARAMS, 0 },
   /*
   ** .pp
--- mutt.h.orig	2019-04-28 20:41:58 UTC
+++ mutt.h
@@ -490,6 +490,7 @@ enum
   OPTREVALIAS,
   OPTREVNAME,
   OPTREVREAL,
+  OPTREVREPLY,
   OPTRFC2047PARAMS,
   OPTSAVEADDRESS,
   OPTSAVEEMPTY,
--- protos.h.orig	2019-04-28 20:41:58 UTC
+++ protos.h
@@ -85,6 +85,7 @@ ADDRESS *mutt_get_address (ENVELOPE *, char **);
 ADDRESS *mutt_lookup_alias (const char *s);
 ADDRESS *mutt_remove_duplicates (ADDRESS *);
 ADDRESS *mutt_remove_xrefs (ADDRESS *, ADDRESS *);
+ADDRESS *mutt_reverse_address (ADDRESS *);
 ADDRESS *mutt_expand_aliases (ADDRESS *);
 ADDRESS *mutt_parse_adrlist (ADDRESS *, const char *);
 
--- send.c.orig	2019-05-10 02:20:15 UTC
+++ send.c
@@ -716,6 +716,10 @@ void mutt_fix_reply_recipients (ENVELOPE *env)
   /* the CC field can get cluttered, especially with lists */
   env->to = mutt_remove_duplicates (env->to);
   env->cc = mutt_remove_duplicates (env->cc);
+  if (option (OPTREVREPLY)){
+	env->to = mutt_reverse_address (env->to);
+	env->cc = mutt_reverse_address (env->cc);
+  }
   env->cc = mutt_remove_xrefs (env->to, env->cc);
 
   if (env->cc && !env->to)
--- sendlib.c.orig	2019-05-09 00:19:59 UTC
+++ sendlib.c
@@ -2764,6 +2764,35 @@ static void set_noconv_flags (BODY *b, short flag)
   }
 }
 
+/* given a list of addresses, return a list of reverse_alias'ed addresses */
+ADDRESS *mutt_reverse_address (ADDRESS *addr)
+{
+  ADDRESS *top,*tmp,*alias;
+
+  if (addr == NULL)
+    return NULL;
+
+  if ((alias = alias_reverse_lookup (addr)) && alias->personal) {
+    tmp = rfc822_cpy_adr_real(alias);
+    tmp->next = addr->next;
+    addr->next = NULL;
+    rfc822_free_address(&addr);
+    addr = tmp;
+  }
+
+  for (top = addr; top->next != NULL; top = tmp) {
+    tmp = top->next;
+    if ((alias = alias_reverse_lookup (tmp)) && alias->personal) {
+      top->next = rfc822_cpy_adr_real(alias);
+      top->next->next = tmp->next;
+      tmp->next = NULL;
+      rfc822_free_address(&tmp);
+      tmp = top->next;
+    }
+  }
+  return addr;
+}
+
 int mutt_write_fcc (const char *path, HEADER *hdr, const char *msgid, int post, char *fcc)
 {
   CONTEXT f;
