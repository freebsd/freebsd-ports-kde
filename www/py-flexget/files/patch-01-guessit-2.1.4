Revert https://github.com/Flexget/Flexget/commit/f6b01c1176ff

--- flexget/components/imdb/utils.py.orig	2019-05-25 02:03:39 UTC
+++ flexget/components/imdb/utils.py
@@ -96,7 +96,7 @@ class ImdbSearch(object):
         parser = plugin.get('parsing', 'imdb_search').parse_movie(raw_name)
         name = parser.name
         year = parser.year
-        if not name:
+        if name == '':
             log.critical('Failed to parse name from %s', raw_name)
             return None
         log.debug('smart_match name=%s year=%s' % (name, str(year)))
--- flexget/components/parsing/parsers/parser_guessit.py.orig	2019-05-25 02:03:39 UTC
+++ flexget/components/parsing/parsers/parser_guessit.py
@@ -40,16 +40,9 @@ _id_regexps = Rebulk().functional(
 )
 
 
-def rules_builder(config):
-    rebulk = rebulk_builder(config)
-    rebulk.rebulk(_id_regexps)
-    return rebulk
+guessit_api = GuessItApi(rebulk_builder().rebulk(_id_regexps))
 
 
-guessit_api = GuessItApi()
-guessit_api.configure(options={}, rules_builder=rules_builder, force=True)
-
-
 def normalize_component(data):
     if data is None:
         return []
@@ -66,19 +59,6 @@ except AttributeError:
 
 
 class ParserGuessit(object):
-    SOURCE_MAP = {
-        'Camera': 'cam',
-        'HD Camera': 'cam',
-        'HD Telesync': 'telesync',
-        'Pay-per-view': 'ppv',
-        'Digital TV': 'dvb',
-        'Video on Demand': 'vod',
-        'Analog HDTV': 'ahdtv',
-        'Ultra HDTV': 'uhdtv',
-        'HD Telecine': 'hdtc',
-        'Web': 'web-dl',
-    }
-
     @staticmethod
     def _guessit_options(options):
         settings = {
@@ -87,6 +67,7 @@ class ParserGuessit(object):
             'allowed_countries': ['us', 'uk', 'gb'],
             'single_value': True,
         }
+        # 'clean_function': clean_value
         options['episode_prefer_number'] = not options.get('identified_by') == 'ep'
         if options.get('allow_groups'):
             options['expected_group'] = options['allow_groups']
@@ -114,18 +95,17 @@ class ParserGuessit(object):
         else:
             version -= 1
         proper_count = guessit_result.get('proper_count', 0)
-        fastsub = 'fast subtitled' in normalize_component(guessit_result.values_list.get('other'))
+        fastsub = 'fastsub' in normalize_component(guessit_result.values_list.get('other'))
         return version + proper_count - (5 if fastsub else 0)
 
-    def _source(self, guessit_result):
-        other = normalize_component(guessit_result.values_list.get('other'))
-        source = self.SOURCE_MAP.get(guessit_result.get('source'), guessit_result.get('source'))
-        # special case
-        if source == 'web-dl' and 'rip' in other:
-            source = 'webrip'
+    def _quality(self, guessit_result):
+        """Generate a FlexGet Quality from a guessit result."""
+        resolution = normalize_component(guessit_result.values_list.get('screen_size'))
+        other = normalize_component(guessit_result.get('other'))
+        if not resolution and 'hr' in other:
+            resolution.append('hr')
 
-        source = normalize_component(source)
-
+        source = normalize_component(guessit_result.get('format'))
         if 'preair' in other:
             source.append('preair')
         if 'screener' in other:
@@ -136,17 +116,6 @@ class ParserGuessit(object):
         if 'region 5' in other or 'region c' in other:
             source.append('r5')
 
-        return source
-
-    def _quality(self, guessit_result):
-        """Generate a FlexGet Quality from a guessit result."""
-        resolution = normalize_component(guessit_result.values_list.get('screen_size'))
-        other = normalize_component(guessit_result.values_list.get('other'))
-        if not resolution and 'high resolution' in other:
-            resolution.append('hr')
-
-        source = self._source(guessit_result)
-
         codec = normalize_component(guessit_result.values_list.get('video_codec'))
         if '10bit' in normalize_component(guessit_result.values_list.get('color_depth')):
             codec.append('10bit')
@@ -155,11 +124,9 @@ class ParserGuessit(object):
         audio_profile = normalize_component(guessit_result.values_list.get('audio_profile'))
         audio_channels = normalize_component(guessit_result.values_list.get('audio_channels'))
         # unlike the other components, audio can be a bit iffy with multiple codecs, so we limit it to one
-        if 'dts' in audio and any(hd in audio_profile for hd in ['hd', 'master audio']):
+        if 'dts' in audio and any(hd in audio_profile for hd in ['HD', 'HDMA']):
             audio = ['dtshd']
-        elif '5.1' in audio_channels and 'dolby digital plus' in audio:
-            audio = ['dd+5.1']
-        elif '5.1' in audio_channels and 'dolby digital' in audio:
+        elif '5.1' in audio_channels and any(dd in audio for dd in ['ac3', 'dolbydigital']):
             audio = ['dd5.1']
 
         # Make sure everything are strings (guessit will return lists when there are multiples)
--- flexget/tests/test_seriesparser.py.orig	2019-05-25 02:03:39 UTC
+++ flexget/tests/test_seriesparser.py
@@ -114,7 +114,6 @@ class TestSeriesParser(object):
         s = parse(name='Something', data='Something - Season2 Episode2')
         assert s.season == 2 and s.episode == 2, 'failed to parse %s' % s
 
-    @pytest.mark.xfail(reason='Not supported in guessit, works for internal parser')
     def test_series_episode(self, parse):
         """SeriesParser: series X, episode Y"""
         s = parse(name='Something', data='Something - Series 2, Episode 2')
--- requirements.txt.orig	2019-05-25 02:03:39 UTC
+++ requirements.txt
@@ -15,7 +15,7 @@ python-dateutil
 jsonschema>=2.0
 path.py>=10.6
 pathlib>=1.0; python_version<'3.4'
-guessit==3.0.3
+guessit<3.0.0
 rebulk>=0.9.0
 apscheduler>=3.2.0
 terminaltables>=3.1.0
