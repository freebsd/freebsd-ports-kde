--- vendor/github.com/msteinert/pam/v2/errors.go.orig	2025-05-02 07:02:58 UTC
+++ vendor/github.com/msteinert/pam/v2/errors.go
@@ -77,15 +77,6 @@ const (
 	ErrAuthtokExpired Error = C.PAM_AUTHTOK_EXPIRED
 	// ErrModuleUnknown indicates a module is not known.
 	ErrModuleUnknown Error = C.PAM_MODULE_UNKNOWN
-	// ErrBadItem indicates a bad item passed to pam_*_item().
-	ErrBadItem Error = C.PAM_BAD_ITEM
-	// ErrConvAgain indicates a conversation function is event driven and data
-	// is not available yet.
-	ErrConvAgain Error = C.PAM_CONV_AGAIN
-	// ErrIncomplete indicates to please call this function again to complete
-	// authentication stack. Before calling again, verify that conversation
-	// is completed.
-	ErrIncomplete Error = C.PAM_INCOMPLETE
 )
 
 // Error returns the error message for the given status.
--- vendor/github.com/msteinert/pam/v2/errors_linux.go.orig	1970-01-01 00:00:00 UTC
+++ vendor/github.com/msteinert/pam/v2/errors_linux.go
@@ -0,0 +1,21 @@
+//go:build linux
+
+package pam
+
+/*
+#include <security/pam_appl.h>
+*/
+import "C"
+
+// Pam Return types
+const (
+	// ErrBadItem indicates a bad item passed to pam_*_item().
+	ErrBadItem Error = C.PAM_BAD_ITEM
+	// ErrConvAgain indicates a conversation function is event driven and data
+	// is not available yet.
+	ErrConvAgain Error = C.PAM_CONV_AGAIN
+	// ErrIncomplete indicates to please call this function again to complete
+	// authentication stack. Before calling again, verify that conversation
+	// is completed.
+	ErrIncomplete Error = C.PAM_INCOMPLETE
+)
--- vendor/github.com/msteinert/pam/v2/transaction.c.orig	2025-05-02 07:02:58 UTC
+++ vendor/github.com/msteinert/pam/v2/transaction.c
@@ -47,15 +47,30 @@ void init_pam_conv(struct pam_conv *conv, uintptr_t ap
 	conv->appdata_ptr = (void *)appdata;
 }
 
+#ifdef OPENPAM
+int pam_start_confdir(const char *service_name, const char *user, const struct pam_conv *pam_conversation,
+		      const char *confdir, pam_handle_t **pamh)
+{
+	if (pamh != NULL)
+		*pamh = NULL;
+
+	return PAM_SYSTEM_ERR;
+}
+#else
 // pam_start_confdir is a recent PAM api to declare a confdir (mostly for
 // tests) weaken the linking dependency to detect if itâ€™s present.
 int pam_start_confdir(const char *service_name, const char *user, const struct pam_conv *pam_conversation,
 		      const char *confdir, pam_handle_t **pamh) __attribute__((weak));
+#endif
 
 int check_pam_start_confdir(void)
 {
+#ifdef OPENPAM
+	return 1;
+#else
 	if (pam_start_confdir == NULL)
 		return 1;
 
 	return 0;
+#endif
 }
--- vendor/github.com/msteinert/pam/v2/transaction.go.orig	2025-05-02 07:02:58 UTC
+++ vendor/github.com/msteinert/pam/v2/transaction.go
@@ -257,14 +257,6 @@ const (
 	Ruser Item = C.PAM_RUSER
 	// UserPrompt is the string use to prompt for a username.
 	UserPrompt Item = C.PAM_USER_PROMPT
-	// FailDelay is the app supplied function to override failure delays.
-	FailDelay Item = C.PAM_FAIL_DELAY
-	// Xdisplay is the X display name
-	Xdisplay Item = C.PAM_XDISPLAY
-	// Xauthdata is the X server authentication data.
-	Xauthdata Item = C.PAM_XAUTHDATA
-	// AuthtokType is the type for pam_get_authtok
-	AuthtokType Item = C.PAM_AUTHTOK_TYPE
 )
 
 // SetItem sets a PAM information item.
--- vendor/github.com/msteinert/pam/v2/transaction_linux.go.orig	1970-01-01 00:00:00 UTC
+++ vendor/github.com/msteinert/pam/v2/transaction_linux.go
@@ -0,0 +1,20 @@
+//go:build linux
+
+package pam
+
+/*
+#include <security/pam_appl.h>
+*/
+import "C"
+
+// PAM Item types.
+const (
+	// FailDelay is the app supplied function to override failure delays.
+	FailDelay Item = C.PAM_FAIL_DELAY
+	// Xdisplay is the X display name
+	Xdisplay Item = C.PAM_XDISPLAY
+	// Xauthdata is the X server authentication data.
+	Xauthdata Item = C.PAM_XAUTHDATA
+	// AuthtokType is the type for pam_get_authtok
+	AuthtokType Item = C.PAM_AUTHTOK_TYPE
+)
