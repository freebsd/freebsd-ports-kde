--- Makefile.orig	2019-02-28 23:45:55 UTC
+++ Makefile
@@ -75,7 +75,7 @@
 #    them; you can also ask for a package with convenience libraries instead --
 #    we'll try to provide them somewhere in the near future.
 
-GAME = crawl
+GAME = stonesoup
 
 # Disable GNU Make implicit rules and variables. Leaving them enabled will slow
 # down MinGW and Cygwin builds by a very VERY noticeable degree. Besides, we have
@@ -114,7 +114,7 @@ ifdef ANDROID
 NOSSE := Yes
 endif
 
-CFOTHERS := -pipe $(EXTERNAL_FLAGS)
+CFOTHERS := $(EXTERNAL_FLAGS)
 ifndef NOSSE
 # force SSE2 dependency, so as to avoid both x87 indeterminacies, and 
 # to prevent lua from using non-standard rounding methods.
@@ -125,10 +125,6 @@ CFWARN_L := -Wall -Wformat-security -Wundef
 
 DEFINES := $(EXTERNAL_DEFINES)
 
-ifndef ANDROID
-LDFLAGS :=
-endif
-
 #
 # The GCC and GXX variables are set later.
 #
@@ -513,15 +509,6 @@ ifdef USE_ICC
 
 # Some very good optimization flags.
   CFOPTIMIZE := -O2 -parallel
-else
-
-  ifneq (,$(shell $(GXX) --version|grep 'g++.*4\.2\.'))
-    # OS X uses a buggy ancient version of gcc without fixes from even
-    # subsequent point releases of 4.2.
-    CFOPTIMIZE := -O0
-  else
-    CFOPTIMIZE := -O2
-  endif
 endif
 
 # Define this to automatically generate code optimized for your machine
@@ -635,7 +622,7 @@ endif
 
 ifndef BUILD_SQLITE
   ifeq ($(shell grep -q sqlite3_prepare $(SQLITE_INCLUDE_DIR)/sqlite3.h 2>/dev/null && echo yes),yes)
-    # INCLUDES_L += -isystem $(SQLITE_INCLUDE_DIR)
+    INCLUDES_L += -isystem $(SQLITE_INCLUDE_DIR)
     LIBS += $(SQLITE_LIB)
     ifneq ($(shell grep -q sqlite3_prepare_v2 $(SQLITE_INCLUDE_DIR)/sqlite3.h 2>/dev/null && echo yes),yes)
       DEFINES_L += -DANCIENT_SQLITE
@@ -798,7 +785,7 @@ ifndef NOWIZARD
 DEFINES += -DWIZARD
 endif
 ifdef NO_OPTIMIZE
-CFOPTIMIZE  := -O0
+CFOPTIMIZE  :=
 endif
 
 ifdef PCH
