In file included from rpcs3/Emu/RSX/GL/GLGSRender.cpp:4:
In file included from rpcs3/Emu/RSX/GL/GLGSRender.h:8:
In file included from rpcs3/Emu/RSX/GL/GLTextOut.h:5:
rpcs3/Emu/RSX/GL/../Common/TextGlyphs.h:4:10: fatal error: 'charconv' file not found
#include <charconv>
         ^~~~~~~~~~
rpcs3/Emu/RSX/GL/../Common/TextGlyphs.h:174:9: error:
      no member named 'from_chars' in namespace 'std'
                        std::from_chars(index.data(), index.data() + index.size(), this_glyph.character, 16);
                        ~~~~~^
rpcs3/Emu/RSX/GL/../Common/TextGlyphs.h:182:11: error:
      no member named 'from_chars' in namespace 'std'
                                        std::from_chars(line.data(), line.data() + line.size(), this_glyph...
                                        ~~~~~^

--- rpcs3/Emu/RSX/Common/TextGlyphs.h.orig	2019-06-10 11:57:03 UTC
+++ rpcs3/Emu/RSX/Common/TextGlyphs.h
@@ -1,13 +1,9 @@
 #pragma once
 
-#include <array>
-#include <charconv>
-#include <string_view>
-#include <unordered_map>
 #include <vector>
+#include <unordered_map>
+#include <Utilities/types.h>
 
-#include "Utilities/types.h"
-
 /**
 * FONT GLYPHS GO HERE
 * Any font in hex format should work here.
@@ -16,7 +12,7 @@
 * This example is the GNU unifont glyph set
 */
 
-constexpr std::array<std::string_view, 128> GNU_UNIFONT_GLYPHS =
+const static std::string GNU_UNIFONT_GLYPHS[128] =
 {
 	"0000 : AAAA00018000000180004A51EA505A51C99E0001800000018000000180005555",
 	"0001 : AAAA00018000000180003993C252325F8A527193800000018000000180005555",
@@ -157,37 +153,40 @@ class GlyphManager (private)
 		u8 character;
 		u32 glyph_point_offset;
 		u32 points_count;
-		std::array<u8, 16> plot;
+		std::vector<u8> plot;
 	};
 
-	std::vector<glyph> glyph_map;
+	std::unordered_map<u8, glyph> glyph_map;
 
-	void decode_glyph_map(const std::array<std::string_view, 128>& font_glyphs)
+	void decode_glyph_map(const std::string glyphs[128])
 	{
-		glyph_map.reserve(font_glyphs.size());
-
-		for (const auto &font_glyph : font_glyphs)
+		for (int i = 0; i < 128; ++i)
 		{
-			glyph this_glyph{};
+			std::string character = glyphs[i];
+			std::string index = character.substr(0, 4);
+			std::string glyph_data = character.substr(7);
 
-			const auto index = font_glyph.substr(0, 4);
-			std::from_chars(index.data(), index.data() + index.size(), this_glyph.character, 16);
+			glyph this_glyph;
+			this_glyph.character = (u8)strtol(index.c_str(), nullptr, 16);
+			this_glyph.plot.reserve(16);
 
-			const auto glyph_data = font_glyph.substr(7);
 			if (glyph_data.length() == 32)
 			{
-				for (std::size_t n = 0; n < this_glyph.plot.size(); ++n)
+				for (int n = 0; n < 16; ++n)
 				{
-					const auto line = glyph_data.substr(n * 2, 2);
-					std::from_chars(line.data(), line.data() + line.size(), this_glyph.plot[n], 16);
+					std::string line = glyph_data.substr(n * 2, 2);
+					u8 value = (u8)strtol(line.c_str(), nullptr, 16);
+					this_glyph.plot.push_back(value);
 				}
 			}
 			else
 			{
-				// TODO: Support 16-wide characters
+				//TODO: Support 16-wide characters
+				for (int n = 0; n < 16; ++n)
+					this_glyph.plot.push_back(0);
 			}
 
-			glyph_map.push_back(this_glyph);
+			glyph_map[this_glyph.character] = this_glyph;
 		}
 	}
 
@@ -198,12 +197,13 @@ class GlyphManager (private)
 		float x;
 		float y;
 
-		explicit glyph_point(float _x, float _y) : x(_x), y(_y)
+		glyph_point(float _x, float _y) : x(_x), y(_y)
 		{}
 	};
 
 	GlyphManager()
 	{
+		glyph_map = {};
 		decode_glyph_map(GNU_UNIFONT_GLYPHS);
 	}
 
@@ -213,11 +213,12 @@ class GlyphManager (private)
 
 		for (auto &entry : glyph_map)
 		{
-			entry.glyph_point_offset = (u32)result.size();
+			glyph& text = entry.second;
+			text.glyph_point_offset = (u32)result.size();
 
-			for (std::size_t j = 0; j < entry.plot.size(); ++j)
+			for (int j = 0; j < 16; ++j)
 			{
-				const auto &line = entry.plot[j];
+				auto &line = text.plot[j];
 				if (line == 0)
 					continue;
 
@@ -225,29 +226,28 @@ class GlyphManager (private)
 				{
 					if (line & (1 << i))
 					{
-						// Font is inverted, so we correct it for conventional renderers
-						const auto x = (float)(7 - i);
-						const auto y = (float)(15 - j);
-						result.emplace_back(x, y);
+						//Font is inverted, so we correct it for conventional renderers
+						float x = (float)(7 - i);
+						float y = (float)(15 - j);
+						result.push_back({ x, y });
 					}
 				}
 			}
 
-			entry.points_count = (u32)result.size() - entry.glyph_point_offset;
+			text.points_count = (u32)result.size() - text.glyph_point_offset;
 		}
 
 		return result;
 	}
 
-	std::unordered_map<u8, std::pair<u32, u32>> get_glyph_offsets() const
+	std::unordered_map<u8, std::pair<u32, u32>> get_glyph_offsets()
 	{
 		std::unordered_map<u8, std::pair<u32, u32>> result = {};
-
-		for (const auto &entry : glyph_map)
+		for (auto &entry : glyph_map)
 		{
-			result[entry.character] = std::make_pair(entry.glyph_point_offset, entry.points_count);
+			result[entry.second.character] = std::make_pair(entry.second.glyph_point_offset, entry.second.points_count);
 		}
 
 		return result;
 	}
-};
+};
\ No newline at end of file
