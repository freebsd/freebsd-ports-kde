rpcs3/util/atomic.cpp:95:3: error: use of undeclared identifier 'fallback_wait'
                fallback_wait(data, size, old_value, timeout);
                ^
rpcs3/util/atomic.cpp:219:4: error: use of undeclared identifier 'fallback_notify_one'
                        fallback_notify_one(data);
                        ^
rpcs3/util/atomic.cpp:307:5: error: use of undeclared identifier 'fallback_notify_all'
                                fallback_notify_all(data);
                                ^

--- rpcs3/util/atomic.cpp.orig	2019-09-13 21:02:48 UTC
+++ rpcs3/util/atomic.cpp
@@ -15,14 +15,11 @@ static atomic_t<u64> s_hashtable[s_hashtable_size];
 // Pointer mask without bits used as hash, assuming signed 48-bit pointers
 static constexpr u64 s_pointer_mask = 0xffff'ffff'ffff & (~(s_hashtable_size - 1) << 2);
 
-// Max number of waiters is 32767
-static constexpr u64 s_waiter_mask = 0x7fff'0000'0000'0000;
+// Max number of waiters is 65535
+static constexpr u64 s_waiter_mask = 0xffff'0000'0000'0000;
 
-//
-static constexpr u64 s_collision_bit = 0x8000'0000'0000'0000;
-
 // Implementation detail (remaining bits out of 32 available for futex)
-static constexpr u64 s_signal_mask = 0xffffffff & ~(s_waiter_mask | s_pointer_mask | s_collision_bit);
+static constexpr u64 s_signal_mask = 0xffffffff & ~(s_waiter_mask | s_pointer_mask);
 
 // Callback for wait() function, returns false if wait should return
 static thread_local bool(*s_tls_wait_cb)(const void* data) = [](const void*)
@@ -182,8 +179,6 @@ void atomic_storage_futex::wait(const void* data, std:
 
 	u32 new_value = 0;
 
-	bool fallback = false;
-
 	const auto [_, ok] = entry.fetch_op([&](u64& value)
 	{
 		if ((value & s_waiter_mask) == s_waiter_mask || (value & s_signal_mask) == s_signal_mask)
@@ -196,17 +191,11 @@ void atomic_storage_futex::wait(const void* data, std:
 		{
 			// Store pointer bits
 			value |= (iptr & s_pointer_mask);
-			fallback = false;
-
-#ifdef _WIN32
-			value += s_signal_mask & -s_signal_mask;
-#endif
 		}
 		else
 		{
-			// Set collision bit
-			value |= s_collision_bit;
-			fallback = true;
+			// Set pointer bits to all ones (collision, TODO)
+			value |= s_pointer_mask;
 		}
 
 		// Add waiter
@@ -220,12 +209,8 @@ void atomic_storage_futex::wait(const void* data, std:
 		return;
 	}
 
-	if (fallback)
+	if (ptr_cmp(data, size, old_value, mask) && s_tls_wait_cb(data))
 	{
-		fallback_wait(data, size, old_value, timeout, mask);
-	}
-	else if (ptr_cmp(data, size, old_value, mask) && s_tls_wait_cb(data))
-	{
 #ifdef _WIN32
 		LARGE_INTEGER qw;
 		qw.QuadPart = -static_cast<s64>(timeout / 100);
@@ -259,18 +244,6 @@ void atomic_storage_futex::wait(const void* data, std:
 		{
 			if (value & s_waiter_mask)
 			{
-#ifdef _WIN32
-				if (!fallback)
-				{
-					if ((value & s_signal_mask) == 0)
-					{
-						return false;
-					}
-
-					value -= s_signal_mask & -s_signal_mask;
-				}
-#endif
-
 				value -= s_waiter_mask & -s_waiter_mask;
 
 				if ((value & s_waiter_mask) == 0)
@@ -279,7 +257,7 @@ void atomic_storage_futex::wait(const void* data, std:
 			return false;
 		});
 
-		if (ok || fallback)
+		if (ok)
 		{
 			break;
 		}
@@ -306,20 +284,15 @@ void atomic_storage_futex::notify_one(const void* data
 
 	atomic_t<u64>& entry = s_hashtable[(iptr >> 2) % s_hashtable_size];
 
+	bool fallback = false;
+
 	const auto [prev, ok] = entry.fetch_op([&](u64& value)
 	{
 		if (value & s_waiter_mask && (value & s_pointer_mask) == (iptr & s_pointer_mask))
 		{
 #ifdef _WIN32
-			if ((value & s_signal_mask) == 0)
-			{
-				// No relevant waiters, do nothing
-				return false;
-			}
-
-			// Try to decrement if possible
+			// Try to decrement if no collision
 			value -= s_waiter_mask & -s_waiter_mask;
-			value -= s_signal_mask & -s_signal_mask;
 
 			if ((value & s_waiter_mask) == 0)
 			{
@@ -337,22 +310,30 @@ void atomic_storage_futex::notify_one(const void* data
 
 			if ((value & s_signal_mask) == s_signal_mask)
 			{
-				// Signal will overflow, fallback to notify_all
-				notify_all(data);
+				// Signal will overflow, fallback
+				fallback = true;
 				return false;
 			}
 #endif
+
 			return true;
 		}
-		else if (value & s_waiter_mask && value & s_collision_bit)
+
+		if (value & s_waiter_mask && (value & s_pointer_mask) == s_pointer_mask)
 		{
-			fallback_notify_one(data);
-			return false;
+			// Collision, notify everything
+			fallback = true;
 		}
 
 		return false;
 	});
 
+	if (fallback)
+	{
+		notify_all(data);
+		return;
+	}
+
 	if (ok)
 	{
 #ifdef _WIN32
@@ -375,32 +356,11 @@ void atomic_storage_futex::notify_all(const void* data
 	{
 		if (value & s_waiter_mask)
 		{
-			if ((value & s_pointer_mask) == (iptr & s_pointer_mask))
+			if ((value & s_pointer_mask) == s_pointer_mask || (value & s_pointer_mask) == (iptr & s_pointer_mask))
 			{
-				if ((value & s_signal_mask) == 0)
-				{
-					// No relevant waiters, do nothing
-					return false;
-				}
-
-				const u64 count = (value & s_signal_mask) / (s_signal_mask & -s_signal_mask);
-				value -= (s_waiter_mask & -s_waiter_mask) * count;
-				value -= (s_signal_mask & -s_signal_mask) * count;
-
-				if ((value & s_waiter_mask) == 0)
-				{
-					// Reset on last waiter
-					value = 0;
-				}
-
+				value = 0;
 				return true;
 			}
-
-			if (value & s_collision_bit)
-			{
-				fallback_notify_all(data);
-				return false;
-			}
 		}
 
 		return false;
@@ -411,7 +371,7 @@ void atomic_storage_futex::notify_all(const void* data
 		return;
 	}
 
-	for (u64 count = old & s_signal_mask; count; count -= s_signal_mask & -s_signal_mask)
+	for (u64 count = old & s_waiter_mask; count; count -= s_waiter_mask & -s_waiter_mask)
 	{
 		NtReleaseKeyedEvent(nullptr, &entry, false, nullptr);
 	}
@@ -426,16 +386,10 @@ void atomic_storage_futex::notify_all(const void* data
 				return false;
 			}
 
-			if ((value & s_pointer_mask) == (iptr & s_pointer_mask))
+			if ((value & s_pointer_mask) == s_pointer_mask || (value & s_pointer_mask) == (iptr & s_pointer_mask))
 			{
 				value += s_signal_mask & -s_signal_mask;
 				return true;
-			}
-
-			if (value & s_collision_bit)
-			{
-				fallback_notify_all(data);
-				return false;
 			}
 		}
 
