diff --git a/CMakeLists.txt b/CMakeLists.txt
index d1dd93bd64..0defd394fb 100644
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -21,6 +21,9 @@ endif()
 if(POLICY CMP0051)
   cmake_policy(SET CMP0051 NEW)
 endif()
+if(POLICY CMP0075)
+  cmake_policy(SET CMP0075 NEW)
+endif()
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/modules/")
 
 if(CMAKE_SYSTEM_NAME MATCHES "Linux")
@@ -46,15 +49,6 @@ if(WITH_CCACHE)
   endif(CCACHE_FOUND)
 endif(WITH_CCACHE)
 
-option(WITH_MANPAGE "Build man pages." ON)
-if(WITH_MANPAGE)
-  find_program(SPHINX_BUILD
-    sphinx-build)
-  if(NOT SPHINX_BUILD)
-    message(FATAL_ERROR "Can't find sphinx-build.")
-  endif(NOT SPHINX_BUILD)
-endif(WITH_MANPAGE)
-
 include_directories(
   ${PROJECT_BINARY_DIR}/src/include
   ${PROJECT_SOURCE_DIR}/src)
@@ -475,9 +469,19 @@ if(WITH_MGR)
   set(MGR_PYTHON_EXECUTABLE ${PYTHON_EXECUTABLE})
   set(MGR_PYTHON_LIBRARIES ${PYTHON_LIBRARIES})
   set(MGR_PYTHON_VERSION_MAJOR ${PYTHON_VERSION_MAJOR})
+  set(MGR_PYTHON_VERSION_MINOR ${PYTHON_VERSION_MINOR})
   # Boost dependency check deferred to Boost section
 endif(WITH_MGR)
 
+option(WITH_MANPAGE "Build man pages." ON)
+if(WITH_MANPAGE)
+  find_program(SPHINX_BUILD
+    sphinx-build-${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR})
+  if(NOT SPHINX_BUILD)
+    message(FATAL_ERROR "Can't find sphinx-build.")
+  endif(NOT SPHINX_BUILD)
+endif(WITH_MANPAGE)
+
 option(WITH_THREAD_SAFE_RES_QUERY "res_query is thread safe" OFF)
 if(WITH_THREAD_SAFE_RES_QUERY)
   set(HAVE_THREAD_SAFE_RES_QUERY 1 CACHE INTERNAL "Thread safe res_query supported.")
@@ -524,6 +528,7 @@ option(ENABLE_COVERAGE "Coverage is enabled" OFF)
 option(PG_DEBUG_REFS "PG Ref debugging is enabled" OFF)
 
 option(WITH_TESTS "enable the build of ceph-test package scripts/binaries" ON)
+option(CTEST_TIMEOUT "Allow customizing the test timeout" 3600)
 
 # fio
 option(WITH_FIO "build with fio plugin enabled" OFF)
@@ -596,7 +601,8 @@ set(BOOST_COMPONENTS
 set(BOOST_HEADER_COMPONENTS container)
 
 if(WITH_MGR)
-	list(APPEND BOOST_COMPONENTS python)
+  list(APPEND BOOST_COMPONENTS
+    python${MGR_PYTHON_VERSION_MAJOR}${MGR_PYTHON_VERSION_MINOR})
 endif()
 if(WITH_BOOST_CONTEXT)
   list(APPEND BOOST_COMPONENTS context coroutine)
